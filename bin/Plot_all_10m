#!/usr/bin/python3

import numpy as np
import pylab as plt
from datetime import datetime, timedelta
from skyfield.api import load 
import matplotlib.dates as mdates
from matplotlib import gridspec
import subprocess
import sys
#import tweepy

col = ['black','magenta','red','orange','lime','green','cyan','blue']

bands = [(10.705,10.945),
         (10.955,11.195),
         (11.205,11.445),
         (11.455,11.695),
         (11.705,11.945),
         (11.955,12.195),
         (12.205,12.445),
         (12.455,12.695)]
                                                        
#twitter = True

def gen_weights(ns, ipad, cosb):
    wei = np.zeros(ns)
    wei[ipad+1:] = 1.0
    
    x = np.arange(cosb)/cosb*2*np.pi
    c = (1-np.cos(x))/2.0
    wei[ipad+1:ipad+1+cosb] = c + 0.05
    wei[-cosb:] = 1-c + 0.05
    
    return wei


def get_scan(pf):
    global date

    line = pf.readline()
    w = line.split(',')

    if len(w)==1:
        return[0], 0
    
    scan = np.array(w[6:]).astype(float)
    date = f"{w[0]}{w[1]}"
    
    return scan, date
                                  
##### Get time and work out file names #####

mdates.set_epoch('0000-12-31T00:00')
print(mdates.get_epoch())

tod = datetime.now()
m10 = timedelta(minutes=10)
#hrd = timedelta(hours=1)

toh = tod - m10 #- hrd
min_str = toh.strftime("%M")[0]+"0"
date_str = toh.strftime(f"%Y-%m-%d %H:{min_str}:00")
plot_date = date_str
date_start = datetime.fromisoformat(date_str)

dir_path = "/data/Starlink_Detector/Transits"
trans_dir = date_start.strftime("%y%m%d/%H/")
hack_file = date_start.strftime("HackRF_%y%m%d_%H00.npy")
kerb_file = date_start.strftime("Kerberos_%y%m%d_%H00.csv")

print(trans_dir)
print(hack_file)
print(kerb_file)


##### Read in HackOne ########

infile = f"{dir_path}/{trans_dir}{hack_file}" # HackOne binary processed file

pf = open(infile,'rb')

w = np.load(pf,allow_pickle=True)

#date_start = w[0]    # Datetime stamp 
lo = float(w[3])     # LO freq tagged on end
nu = w[1]/1e6        # Frequency array in MHz
spec = w[2]          # Band amplutudes in dB

start = date_start
end = start + m10

date_str = date_start.strftime("%Y-%m-%d")
datehr_str = start.strftime("%Y%m%d-%H%M")

ipos = np.argsort(nu)    # Reorder interstepped data
nu = nu[ipos]
spec = spec[ipos]

nu_start = nu[0]     # Keep start freq as reference    

print(nu_start)

nspec = len(spec)
#wei = gen_weights(nspec,40,100)  # Generate weighting function

nu_lo = nu[0] + 10782.72 #10410     # Lowest freq of low band
nu_hi = nu[-1] + 10782.72 #10410   # Highest freq of high band
nu_step = nu[1]-nu[0]    # Frequency step

nsamp = int((nu_hi-nu_lo)/nu_step) # Array size for combined spec

print(nu[0], nu[-1], nsamp, lo)

specs = []    # Initize list for combined spectra

not_EOF = True
while not_EOF:
    scan = np.zeros(nsamp+1)
    hit = np.zeros(nsamp+1)
    
    for i in range(5):  # Combine 4 scans ~1s
        try:
            w = np.load(pf,allow_pickle=True)
        except:
            not_EOF = False
            break

        date = w[0]          # Store date for check
        lo = float(w[3])     # LO freq tagged on end
        nu = w[1]/1e6        # Freq array
        spec = w[2]          # Amp array
        
        ips = np.argsort(nu) # De-jitter data   
        nu = nu[ips]
        spec = spec[ips]
       
        ipos = ((lo + nu - nu_lo)/nu_step).astype(int) # position output arr
        ip = ((nu-nu[0])/nu_step).astype(int)          # position input arr

#        print(hit.shape,wei.shape)
        hit[ipos] = hit[ipos] + 1 #wei[ip]                # Weighted sum
        scan[ipos] = scan[ipos] + spec  #*wei[ip]

    if w[0]>start and w[0]<end:
        ipos = np.where(hit>0)[0]  # Just use data where there are hits
        scan[ipos] /= hit[ipos]
       
        specs.append(scan)         # Add spec
    

    
specs = np.array(specs)        # Convert to array
base = np.median(specs,axis=0) # Median baseline over period
rain = np.mean(specs,axis=1)

#print(rain)

waterfall = specs-base         # Data for waterfall plot
#waterfall = waterfall[:,40:]   # Clip out where LO is changing

date_end = date                # Use that date we were saving

hack_y_lims = [start, end]
hack_x_lims = [(nu_lo+nu_step*0)/1e3, nu_hi/1e3]

pf.close()

#### Read in Kerberos data ###


#infile = sys.argv[2]
infile = f"{dir_path}/{trans_dir}{kerb_file}"
pf = open(infile,'r')

date = "null"
    
line = pf.readline()
w = line.split(',')
date_start = datetime.fromisoformat(f"{w[0]}{w[1]}")
f1 = float(w[2])/1e9
f2 = float(w[3])/1e9

scan = np.array(w[6:]).astype(float)

spec = []
spec.append(scan)

while True:
    scan, datim = get_scan(pf)
    if len(scan)==1:
        break
    
    if datim==0:
        break
    
    datim = datetime.fromisoformat(datim)

    if datim>start and datim<end:
        spec.append(scan)

print(datim)
specs = np.array(spec)

date_end = end #datetime.fromisoformat(date)
kerb_x_lims = [f1, f2]
kerb_y_lims = [date_start, date_end]

base = np.median(specs,axis=0)

#### Read in transits ########

ts = load.timescale()
trans_file = f"{dir_path}/{trans_dir}transits.csv"
pf = open(trans_file,'r')
sats = []
stim = []

start_ord = mdates.date2num(start)
end_ord = mdates.date2num(end)

print(start, start_ord)
print(end, end_ord)

while True:
   line = pf.readline()
   w = line.split(',')

   if len(w)==1:
       break

   jd = ts.tt_jd(float(w[2]))
   datim = jd.toordinal()
   
#   print(datim,start_ord,end_ord)
   if datim>start_ord and datim<end_ord:
#       print(datim,start,end)
       sats.append(w[0])
       stim.append(datim)
                               


#### Plotting HackOne ########

formatter = mdates.DateFormatter('%H:%M')

fig, ax = plt.subplots(figsize=(10,16))
gs = gridspec.GridSpec(1, 3, width_ratios=[2.5, 1, 2.5])
fig.suptitle(f"Startlink and Oneweb transits for {date_str}")
a1 = plt.subplot(gs[0])

a1.yaxis.set_major_formatter(formatter)
plt.xlabel('Frquency [GHz}')
plt.title('Downlinks')

y_lims = mdates.date2num(hack_y_lims)  
plt.imshow(waterfall,vmin=-0.1,vmax=2.5, aspect=1300,extent=[hack_x_lims[0],hack_x_lims[1],y_lims[0],y_lims[1]],origin='lower')


#### Plot bands and satellites #####

#nf = waterfall.shape[1]
#df = (f2-f1)/nf

ny = waterfall.shape[0]
dt = (y_lims[1]-y_lims[0])/ny

a2 = plt.subplot(gs[1])
t = np.arange(ny)*dt + y_lims[0]

b = np.zeros((8,waterfall.shape[0]))

#print(waterfall.shape, b.shape)

for i in range(8):
    lo = int((bands[i][0]*1e3 - nu_lo)/nu_step)
    hi = int((bands[i][1]*1e3 - nu_lo)/nu_step)

    print(i,lo,hi)
    b[i,:] = np.mean(waterfall[:,lo:hi],axis=1)

for i in range(8):
    a2.plot(b[i,:],t,color=col[i],label=f"{i+1}")

for i in np.arange(len(sats)):
    words = sats[i].split('-')
    if len(words)==2:
        if words[0]=="STARLINK" and len(words[1])==10:
            plt.text(0.4+(i%7)/8,stim[i],sats[i],fontsize="small",color='red')
        else:
            plt.text(0.4+(i%7)/8,stim[i],sats[i],fontsize="xx-small")
    else:
        plt.text(0.4+(i%7)/8,stim[i],sats[i],fontsize="xx-small")

            #    print(i,stim[i],sats[i])
	
a2.plot((rain+53.0)/3,t,'--',label='RG')

#print((rain+52.5)/3)

#print(y_lims[0], y_lims[1])
plt.title('      Name and Band')

plt.xlim(0.1,1.5)
plt.ylim(y_lims[0],y_lims[1])

#a2.axes.get_xaxis().set_visible(False)
#a2.axes.get_yaxis().set_visible(False)
plt.axis('off')
#plt.axis([0.25, 0.25, 0.75, .55])
a2.legend(loc=0, bbox_to_anchor=(1.03, 0.05), fontsize='6')


    
#### Plotting Kerberos #######

a3 = plt.subplot(gs[2])
#plt.figure(2)
#fig, ax = plt.subplots()

  
#y_lims = mdates.date2num(kerb_y_lims)  

f1 = kerb_x_lims[0]*1e3 + 10782.72 #10410
f2 = kerb_x_lims[1]*1e3 + 10782.72 #10410

plt.imshow(specs-base,aspect=700,extent=[f1,f2,y_lims[0],y_lims[1]],vmin=-0.1,vmax
=1.5,origin='lower')

a3.axes.get_yaxis().set_visible(False)
plt.xlabel('Frequency [MHz]           ')
plt.title('Beacons')

fig.tight_layout()
fig.subplots_adjust(wspace=0.02,bottom=0.03,top=0.94)


fname = f"{dir_path}/{trans_dir}transits_{datehr_str}.png"
plt.savefig(fname)

plt.show()

res = subprocess.run(["cp",fname,"/data/webpages/latest.png"]) 